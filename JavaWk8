
//Srikar Voleti b      wk 9 foothill changing sort keys
public class Foothill
{
 public static void main (String[] args)
 {
  // create four student arrays to test Student and StudentArrayUtilites
  Student[] oddClass = { new Student("Yoffie", "Jaren", 925),
   new Student("Lippolis", "Bracken", 216),
   new Student("Moynagh", "Fingal", 992),
   new Student("Gnecco", "Jaida", 423),
   new Student("Boeriu", "Viola", 830),
   new Student("Steller", "Dawson", 584),
   new Student("Pick", "Hilton", 785),
   new Student("Lakin", "Isai", 168),
   new Student("Chagnon", "Janice", 536),
   new Student("Pinot", "Wilbur", 282),
   new Student("Kleiman", "Adriana", 581),
   new Student("Luby", "Mercia", 942),
   new Student("Hollern", "Dove", 339),
   new Student("Vecchio", "Isabel", 70),
   new Student("Deresiewicz", "Emmanuel", 554)
  };
  Student[] evenClass = { new Student("Yoffie", "Jaren", 925),
   new Student("Lippolis", "Bracken", 216),
   new Student("Moynagh", "Fingal", 992),
   new Student("Gnecco", "Jaida", 423),
   new Student("Boeriu", "Viola", 830),
   new Student("Steller", "Dawson", 584),
   new Student("Pick", "Hilton", 785),
   new Student("Lakin", "Isai", 168),
   new Student("Chagnon", "Janice", 536),
   new Student("Pinot", "Wilbur", 282),
   new Student("Kleiman", "Adriana", 581),
   new Student("Luby", "Mercia", 942),
   new Student("Hollern", "Dove", 339),
   new Student("Vecchio", "Isabel", 70),
   new Student("Deresiewicz", "Emmanuel", 554),
   new Student("Du boux", "Hebe", 970)
  };
  Student[] smallClass = { new Student("Tuckerman", "Abe", 643) };
  Student[] noClass = new Student[0];

  // 1. display array immediately
  System.out.println(StudentArrayUtilities.toString("Before:", evenClass) +
   "\n");

  // 2. sort array using default sort key and display
  System.out.println("Sorting by default ---------------");
  StudentArrayUtilities.arraySort(evenClass);
  System.out.println(StudentArrayUtilities.toString("After:", evenClass) +
   "\n");

  // 3. change sort key to first name, sort, and display
  Student.setSortKey(Student.SORT_BY_FIRST);
  System.out.println("Sorting by first name ---------------");
  StudentArrayUtilities.arraySort(evenClass);
  System.out.println(StudentArrayUtilities.toString("After:", evenClass) +
   "\n");

  // 4. change sort key to total score, sort, and display
  Student.setSortKey(Student.SORT_BY_POINTS);
  System.out.println("Sorting by total points ---------------");
  StudentArrayUtilities.arraySort(evenClass);
  System.out.println(
   StudentArrayUtilities.toString("After:", evenClass) + "\n");

  // 5. set sort key to first name and display median score
  Student.setSortKey(Student.SORT_BY_FIRST);
  System.out.println("Median of evenClass = " +
   StudentArrayUtilities.getMedianDestructive(evenClass));

  // 6. make sure that getMedianDestructive() preserves sort key
  if (Student.getSortKey() == Student.SORT_BY_FIRST)
   System.out.println("Successfully preserved sort key.");
  else
   System.out.println("Did not successfully preserve sort key.");

  // Display median of each array
  System.out.println("Median of oddClass = " +
   StudentArrayUtilities.getMedianDestructive(oddClass));
  System.out.println("Median of smallClass = " +
   StudentArrayUtilities.getMedianDestructive(smallClass));
  System.out.println("Median of noClass = " +
   StudentArrayUtilities.getMedianDestructive(noClass));
 }
}

class Student
{
 private String lastName;
 private String firstName;
 private int totalPoints;

 public static final String DEFAULT_NAME = "zz-error";
 public static final int DEFAULT_POINTS = 0;
 public static final int MAX_POINTS = 1000;
 public static final int SORT_BY_FIRST = 88, SORT_BY_LAST = 98,
  SORT_BY_POINTS = 108;

 private static int sortKey = SORT_BY_LAST;

 // constructor requires parameters - no default supplied
 public Student( String last, String first, int points)
 {
  if ( !setLastName(last) )
   lastName = DEFAULT_NAME;
  if ( !setFirstName(first) )
   firstName = DEFAULT_NAME;
  if ( !setPoints(points) )
   totalPoints = DEFAULT_POINTS;
 }

 // getters
 public String getLastName() { return lastName; }
 public String getFirstName() { return firstName; }
 public int getTotalPoints() { return totalPoints; }
 public static int getSortKey() { return sortKey; }

 // setters
 public boolean setLastName(String last)
 {
  if ( !validString(last) )
   return false;
  lastName = last;
  return true;
 }

 public boolean setFirstName(String first)
 {
  if ( !validString(first) )
   return false;
  firstName = first;
  return true;
 }

 public boolean setPoints(int pts)
 {
  if ( !validPoints(pts) )
   return false;
  totalPoints = pts;
  return true;
 }

 public static boolean setSortKey(int key)
 {
  if (key == SORT_BY_FIRST || key == SORT_BY_LAST || key == SORT_BY_POINTS)
  {
   sortKey = key;
   return true;
  }
  return false;
 }

 // comparison based on sortKey. positive if firstStud larger, zero if equal,
 // negative if secondStud larger
 public static int compareTwoStudents( Student firstStud, Student secondStud )
 {
  int result = -1;

  switch (sortKey)
  {
   case SORT_BY_FIRST:
    result = firstStud.firstName.compareToIgnoreCase(secondStud.firstName);
    break;
   case SORT_BY_LAST:
    result = firstStud.lastName.compareToIgnoreCase(secondStud.lastName);
    break;
   case SORT_BY_POINTS:
    if (firstStud.totalPoints > secondStud.totalPoints)
     result = 1;
    else if (firstStud.totalPoints == secondStud.totalPoints)
     result = 0;
    else
     result = -1;
    break;
  }

  return result;
 }

 // returns all member data formatted into a string
 public String toString()
 {
  String resultString;

  resultString = " "+ lastName
   + ", " + firstName
   + " points: " + totalPoints
   + "\n";
  return resultString;
 }

 private static boolean validString( String testStr )
 {
  if (
   testStr != null && testStr.length() > 0
    && Character.isLetter(testStr.charAt(0))
  )
   return true;
  return false;
 }

 private static boolean validPoints( int testPoints )
 {
  if (testPoints >= 0 && testPoints <= MAX_POINTS)
   return true;
  return false;
 }
}

class StudentArrayUtilities
{
 // returns member data from all Student in array formatted into a string
 public static String toString(String title, Student[] data)
 {
  String output = "";

  // build the output string from the individual Students:
  output += title + "\n";
  for (int k = 0; k < data.length; k++)
   output += " " + data[k];

  return output;
 }

 // returns true if a modification was made to the array
 private static boolean floatLargestToTop(Student[] data, int top)
 {
  boolean changed = false;
  Student temp;

  // compare with client call to see where the loop stops
  for (int k = 0; k < top; k++)
   if ( Student.compareTwoStudents(data[k], data[k + 1]) > 0 )
   {
    temp = data[k];
    data[k] = data[k + 1];
    data[k + 1] = temp;
    changed = true;
   }
  return changed;
 }

 // public callable arraySort() - assumes Student class has a compareTo()
 public static void arraySort(Student[] array)
 {
  for (int k = 0; k < array.length; k++)
   // compare with method def to see where inner loop stops
   if ( !floatLargestToTop(array, array.length - 1 - k) )
    return;
 }

 // sorts array and returns points of median Student
 public static double getMedianDestructive(Student[] array)
 {
  int oldSortKey = Student.getSortKey();
  Student.setSortKey(Student.SORT_BY_POINTS);
  arraySort(array);
  Student.setSortKey(oldSortKey);

  double median;
  if (array.length == 0)
   median = 0;
  else if (array.length == 1)
   median = array[0].getTotalPoints();
  else if (array.length % 2 == 0)
   median = ((double) (array[array.length / 2 - 1].getTotalPoints() +
    array[array.length / 2].getTotalPoints()) / 2);
  else
   median = array[array.length / 2].getTotalPoints();
  return median;
 }
}

/* --------------------- Sample Run --------------------------

Before:
Yoffie, Jaren points: 925
Lippolis, Bracken points: 216
Moynagh, Fingal points: 992
Gnecco, Jaida points: 423
Boeriu, Viola points: 830
Steller, Dawson points: 584
Pick, Hilton points: 785
Lakin, Isai points: 168
Chagnon, Janice points: 536
Pinot, Wilbur points: 282
Kleiman, Adriana points: 581
Luby, Mercia points: 942
Hollern, Dove points: 339
Vecchio, Isabel points: 70
Deresiewicz, Emmanuel points: 554
Du boux, Hebe points: 970


Sorting by default ---------------
After:
Boeriu, Viola points: 830
Chagnon, Janice points: 536
Deresiewicz, Emmanuel points: 554
Du boux, Hebe points: 970
Gnecco, Jaida points: 423
Hollern, Dove points: 339
Kleiman, Adriana points: 581
Lakin, Isai points: 168
Lippolis, Bracken points: 216
Luby, Mercia points: 942
Moynagh, Fingal points: 992
Pick, Hilton points: 785
Pinot, Wilbur points: 282
Steller, Dawson points: 584
Vecchio, Isabel points: 70
Yoffie, Jaren points: 925


Sorting by first name ---------------
After:
Kleiman, Adriana points: 581
Lippolis, Bracken points: 216
Steller, Dawson points: 584
Hollern, Dove points: 339
Deresiewicz, Emmanuel points: 554
Moynagh, Fingal points: 992
Du boux, Hebe points: 970
Pick, Hilton points: 785
Vecchio, Isabel points: 70
Lakin, Isai points: 168
Gnecco, Jaida points: 423
Chagnon, Janice points: 536
Yoffie, Jaren points: 925
Luby, Mercia points: 942
Boeriu, Viola points: 830
Pinot, Wilbur points: 282


Sorting by total points ---------------
After:
Vecchio, Isabel points: 70
Lakin, Isai points: 168
Lippolis, Bracken points: 216
Pinot, Wilbur points: 282
Hollern, Dove points: 339
Gnecco, Jaida points: 423
Chagnon, Janice points: 536
Deresiewicz, Emmanuel points: 554
Kleiman, Adriana points: 581
Steller, Dawson points: 584
Pick, Hilton points: 785
Boeriu, Viola points: 830
Yoffie, Jaren points: 925
Luby, Mercia points: 942
Du boux, Hebe points: 970
Moynagh, Fingal points: 992


Median of evenClass = 567.5
Successfully preserved sort key.
Median of oddClass = 554.0
Median of smallClass = 643.0
Median of noClass = 0.0
