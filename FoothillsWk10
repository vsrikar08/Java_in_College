//Srikar Voleti
//foothill wk10
// A StudentArrayUtilities Class with an Internal Array
public class Foothill
{
 public static void main (String[] args)
 {
  int k;
  Student student;

  Student[] myClass = { new Student("Toomey","Pat", 95),
   new Student("Le Pen","Marine",123),
   new Student("May","Theresa", 195),
   new Student("Rehnquist","William",148),
   new Student("Jackson","Andrew", 108),
   new Student("Perry","Rick",225),
   new Student("Harris","Kamala", 44),
   new Student("Hatch","Orrin",452),
   new Student("Trump","Donald", 295),
   new Student("Obama","Barack",321),
  };

  // instantiate a StudArrUtilObject
  StudentArrayUtilities myStuds = new StudentArrayUtilities();

  // we can add stdunts manually and individually
  myStuds.addStudent( new Student("bartman", "petra", 102) );
  myStuds.addStudent( new Student("charters","rodney", 295));

  // if we happen to have an array available, we can add students in loop.
  for (k = 0; k < myClass.length; k++)
   myStuds.addStudent( myClass[k] );

  System.out.println( myStuds.toString("Before: "));

  myStuds.arraySort();
  System.out.println( myStuds.toString("Sorting by default: "));

  Student.setSortKey(Student.SORT_BY_FIRST);
  myStuds.arraySort();
  System.out.println( myStuds.toString("Sorting by first name: "));

  Student.setSortKey(Student.SORT_BY_POINTS);
  myStuds.arraySort();
  System.out.println( myStuds.toString("Sorting by total points: "));

  // test median
  System.out.println("Median of evenClass = "
   +  myStuds.getMedianDestructive() + "\n");

  // various tests of removing and adding too many students
  for (k = 0; k < 100; k++)
  {
   if ( (student = myStuds.removeStudent()) != null)
    System.out.println("Removed " + student);
   else
   {
    System.out.println("Empty after " + k + " removes.");
    break;
   }
  }

  for (k = 0; k < 100; k++)
  {
   if (!myStuds.addStudent(new Student("first", "last", 22)))
   {
    System.out.println("Full after " + k + " adds.");
    break;
   }
  }
 }
}

class Student
{
 private String lastName;
 private String firstName;
 private int totalPoints;

 public static final String DEFAULT_NAME = "zz-error";
 public static final int DEFAULT_POINTS = 0;
 public static final int MAX_POINTS = 1000;
 public static final int SORT_BY_FIRST = 88, SORT_BY_LAST = 98,
  SORT_BY_POINTS = 108;

 private static int sortKey = SORT_BY_LAST;

 // constructor requires parameters - no default supplied
 public Student( String last, String first, int points)
 {
  if ( !setLastName(last) )
   lastName = DEFAULT_NAME;
  if ( !setFirstName(first) )
   firstName = DEFAULT_NAME;
  if ( !setPoints(points) )
   totalPoints = DEFAULT_POINTS;
 }

 // getters
 public String getLastName() { return lastName; }
 public String getFirstName() { return firstName; }
 public int getTotalPoints() { return totalPoints; }
 public static int getSortKey() { return sortKey; }

 // setters
 public boolean setLastName(String last)
 {
  if ( !validString(last) )
   return false;
  lastName = last;
  return true;
 }

 public boolean setFirstName(String first)
 {
  if ( !validString(first) )
   return false;
  firstName = first;
  return true;
 }

 public boolean setPoints(int pts)
 {
  if ( !validPoints(pts) )
   return false;
  totalPoints = pts;
  return true;
 }

 public static boolean setSortKey(int key)
 {
  if (key == SORT_BY_FIRST || key == SORT_BY_LAST || key == SORT_BY_POINTS)
  {
   sortKey = key;
   return true;
  }
  return false;
 }

 // comparison based on sortKey. positive if firstStud larger, zero if equal,
 // negative if secondStud larger
 public static int compareTwoStudents( Student firstStud, Student secondStud )
 {
  int result = -1;

  switch (sortKey)
  {
   case SORT_BY_FIRST:
    result = firstStud.firstName.compareToIgnoreCase(secondStud.firstName);
    break;
   case SORT_BY_LAST:
    result = firstStud.lastName.compareToIgnoreCase(secondStud.lastName);
    break;
   case SORT_BY_POINTS:
    if (firstStud.totalPoints > secondStud.totalPoints)
     result = 1;
    else if (firstStud.totalPoints == secondStud.totalPoints)
     result = 0;
    else
     result = -1;
    break;
  }

  return result;
 }

 // returns all member data formatted into a string
 public String toString()
 {
  String resultString;

  resultString = " "+ lastName
   + ", " + firstName
   + " points: " + totalPoints
   + "\n";
  return resultString;
 }

 private static boolean validString( String testStr )
 {
  if (
   testStr != null && testStr.length() > 0
    && Character.isLetter(testStr.charAt(0))
  )
   return true;
  return false;
 }

 private static boolean validPoints( int testPoints )
 {
  if (testPoints >= 0 && testPoints <= MAX_POINTS)
   return true;
  return false;
 }
}

class StudentArrayUtilities
{
 private Student[] theArray;
 private int numStudents;

 public static final int MAX_STUDENTS = 20;

 StudentArrayUtilities()
 {
  theArray = new Student[MAX_STUDENTS];
  numStudents = 0;
 }

 public boolean addStudent(Student stud)
 {
  if (numStudents == MAX_STUDENTS || stud == null)
   return false;
  theArray[numStudents++] = stud;
  return true;
 }

 public Student removeStudent()
 {
  Student returnValue;
  if (numStudents == 0)
   return null;
  returnValue = theArray[--numStudents];
  theArray[numStudents] = null;
  return returnValue;
 }

 // returns member data from all Student in array formatted into a string
 public String toString(String title)
 {
  String output = "";

  // build the output string from the individual Students:
  output += title + "\n";
  for (int k = 0; k < numStudents; k++)
   output += "  " + theArray[k].toString();

  return output;
 }

 // returns true if a modification was made to the array
 private boolean floatLargestToTop(int top)
 {
  boolean changed = false;
  Student temp;

  // compare with client call to see where the loop stops
  for (int k = 0; k < top; k++)
   if ( Student.compareTwoStudents(theArray[k], theArray[k + 1]) > 0 )
   {
    temp = theArray[k];
    theArray[k] = theArray[k + 1];
    theArray[k + 1] = temp;
    changed = true;
   }
  return changed;
 }

 // public callable arraySort() - assumes Student class has a compareTo()
 public void arraySort()
 {
  for (int k = 0; k < numStudents; k++)
   // compare with method def to see where inner loop stops
   if ( !floatLargestToTop(numStudents - 1 - k) )
    return;
 }

 // sorts array and returns points of median Student
 public double getMedianDestructive()
 {
  int oldSortKey = Student.getSortKey();
  Student.setSortKey(Student.SORT_BY_POINTS);
  arraySort();
  Student.setSortKey(oldSortKey);

  double median;
  if (numStudents == 0)
   median = 0;
  else if (numStudents == 1)
   median = theArray[0].getTotalPoints();
  else if (numStudents % 2 == 0)
   median = ((double) (theArray[numStudents / 2 - 1].getTotalPoints() +
    theArray[numStudents / 2].getTotalPoints()) / 2);
  else
   median = theArray[numStudents / 2].getTotalPoints();
  return median;
 }
}
OUTPUT:
Before: 
   bartman, petra points: 102
   charters, rodney points: 295
   smith, fred points: 95
   bauer, jack points: 123
   jacobs, carrie points: 195
   renquist, abe points: 148
   zz-error, trevor points: 108
   perry, fred points: 225
   loceff, fred points: 44
   stollings, pamela points: 452
   charters, rodney points: 295
   cassar, john points: 321

Sorting by default: 
   bartman, petra points: 102
   bauer, jack points: 123
   cassar, john points: 321
   charters, rodney points: 295
   charters, rodney points: 295
   jacobs, carrie points: 195
   loceff, fred points: 44
   perry, fred points: 225
   renquist, abe points: 148
   smith, fred points: 95
   stollings, pamela points: 452
   zz-error, trevor points: 108

Sorting by first name: 
   renquist, abe points: 148
   jacobs, carrie points: 195
   loceff, fred points: 44
   perry, fred points: 225
   smith, fred points: 95
   bauer, jack points: 123
   cassar, john points: 321
   stollings, pamela points: 452
   bartman, petra points: 102
   charters, rodney points: 295
   charters, rodney points: 295
   zz-error, trevor points: 108

Sorting by total points: 
   loceff, fred points: 44
   smith, fred points: 95
   bartman, petra points: 102
   zz-error, trevor points: 108
   bauer, jack points: 123
   renquist, abe points: 148
   jacobs, carrie points: 195
   perry, fred points: 225
   charters, rodney points: 295
   charters, rodney points: 295
   cassar, john points: 321
   stollings, pamela points: 452

Median of evenClass = 171.5

Removed  stollings, pamela points: 452

Removed  cassar, john points: 321

Removed  charters, rodney points: 295

Removed  charters, rodney points: 295

Removed  perry, fred points: 225

Removed  jacobs, carrie points: 195

Removed  renquist, abe points: 148

Removed  bauer, jack points: 123

Removed  zz-error, trevor points: 108

Removed  bartman, petra points: 102

Removed  smith, fred points: 95

Removed  loceff, fred points: 44

Empty after 12 removes.
Full after 20 adds.
